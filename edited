         stage('Build') {
              steps {
                  sh 'echo Building...'
              }
         }
         stage('Lint HTML') {
              steps {
                  sh 'tidy -q -e *.html'
              }
         }

        stage('Lint Dockerfile') {
        steps {
            script {
                docker.image('hadolint/hadolint:latest-debian').inside() {
                        sh 'hadolint ./Dockerfile | tee -a hadolint_lint.txt'
                        sh '''
                            lintErrors=$(stat --printf="%s"  hadolint_lint.txt)
                            if [ "$lintErrors" -gt "0" ]; then
                                echo "Errors have been found, please see below"
                                cat hadolint_lint.txt
                                exit 1
                            else
                                echo "There are no erros found on Dockerfile!!"
                            fi
                        '''
                }
            }
        }
    }
    
         stage('Build Docker Image') {
              steps {
                  sh 'docker build -t django-capstone-project .'
              }
         }
         stage('Push Docker Image') {
              steps {
                  withDockerRegistry([url: "", credentialsId: "docker-hub"]) {
                      sh "docker tag django-capstone-project angeloobeta/django-capstone-project"
                      sh "docker push angeloobeta/django-capstone-project"
                  }
              }
         }





         //sh "eksctl create cluster --name capstonecluster --version 1.17 --nodegroup-name capstone-standard-workers --node-type t2.medium --nodes 2 --nodes-min 1 --nodes-max 3 --node-ami auto --region af-south-1"
         //sh "aws eks --region af-south-1 update-kubeconfig --name  capstonecluster"
     